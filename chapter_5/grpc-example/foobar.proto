syntax = "proto3";

package foobar;

// Top level gRPC service with two RPC calls
service FooBarService {
    rpc record_cab_location(CabLocationRequest) returns (CabLocationResponse);
    rpc get_cabs(GetCabRequest) returns (GetCabResponse);
}

// A request to record location of a cab
// Name: unique name for a cab
// Location: current location of the given cab
message CabLocationRequest {
    string name = 1;
    Location location = 2;
}

// A response for a CabLocationRequest
// Accepted: a boolean indicating if this request was accepted for processing
message CabLocationResponse {
    bool accepted = 1;
}

// A request to return cabs at a given location
// Location: a given location
message GetCabRequest {
    Location location = 1;
}

// A response for GetCabRequest
// Cabs: list of cabs around the given location
message GetCabResponse {
    repeated Cab cabs = 1;
}

// Message that the CabLocationRequest passes to the server
message Cab {
    string name = 1;
    Location location = 2;
}

// Message with the location of a cab
message Location {
    float latitude = 1;
    float longitude = 2;
}
